# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coalesce_python_sdk import schemas  # noqa: F401


class SourceMap(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "name",
            "noLinkRefs",
            "join",
            "dependencies",
        }
        
        class properties:
            
            
            class dependencies(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RefLink']:
                        return RefLink
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['RefLink'], typing.List['RefLink']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dependencies':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RefLink':
                    return super().__getitem__(i)
        
            @staticmethod
            def join() -> typing.Type['JoinCondition']:
                return JoinCondition
            name = schemas.StrSchema
            
            
            class noLinkRefs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RefLink']:
                        return RefLink
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['RefLink'], typing.List['RefLink']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'noLinkRefs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RefLink':
                    return super().__getitem__(i)
        
            @staticmethod
            def aliases() -> typing.Type['AliasToStepIDMapping']:
                return AliasToStepIDMapping
        
            @staticmethod
            def customSQL() -> typing.Type['CustomSQL']:
                return CustomSQL
            __annotations__ = {
                "dependencies": dependencies,
                "join": join,
                "name": name,
                "noLinkRefs": noLinkRefs,
                "aliases": aliases,
                "customSQL": customSQL,
            }
    
    name: MetaOapg.properties.name
    noLinkRefs: MetaOapg.properties.noLinkRefs
    join: 'JoinCondition'
    dependencies: MetaOapg.properties.dependencies
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dependencies"]) -> MetaOapg.properties.dependencies: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["join"]) -> 'JoinCondition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["noLinkRefs"]) -> MetaOapg.properties.noLinkRefs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aliases"]) -> 'AliasToStepIDMapping': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customSQL"]) -> 'CustomSQL': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dependencies", "join", "name", "noLinkRefs", "aliases", "customSQL", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dependencies"]) -> MetaOapg.properties.dependencies: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["join"]) -> 'JoinCondition': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["noLinkRefs"]) -> MetaOapg.properties.noLinkRefs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aliases"]) -> typing.Union['AliasToStepIDMapping', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customSQL"]) -> typing.Union['CustomSQL', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dependencies", "join", "name", "noLinkRefs", "aliases", "customSQL", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        noLinkRefs: typing.Union[MetaOapg.properties.noLinkRefs, list, tuple, ],
        join: 'JoinCondition',
        dependencies: typing.Union[MetaOapg.properties.dependencies, list, tuple, ],
        aliases: typing.Union['AliasToStepIDMapping', schemas.Unset] = schemas.unset,
        customSQL: typing.Union['CustomSQL', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SourceMap':
        return super().__new__(
            cls,
            *args,
            name=name,
            noLinkRefs=noLinkRefs,
            join=join,
            dependencies=dependencies,
            aliases=aliases,
            customSQL=customSQL,
            _configuration=_configuration,
            **kwargs,
        )

from coalesce_python_sdk.model.alias_to_step_id_mapping import AliasToStepIDMapping
from coalesce_python_sdk.model.custom_sql import CustomSQL
from coalesce_python_sdk.model.join_condition import JoinCondition
from coalesce_python_sdk.model.ref_link import RefLink
