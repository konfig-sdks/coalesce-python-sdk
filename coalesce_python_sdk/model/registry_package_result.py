# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coalesce_python_sdk import schemas  # noqa: F401


class RegistryPackageResult(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A single package in the registry.
    """


    class MetaOapg:
        required = {
            "latestRelease",
            "org",
            "name",
            "description",
            "id",
            "publicReleases",
        }
        
        class properties:
            description = schemas.StrSchema
            name = schemas.StrSchema
            org = schemas.StrSchema
            latestRelease = schemas.StrSchema
            id = schemas.StrSchema
        
            @staticmethod
            def publicReleases() -> typing.Type['RegistryPackageResultPublicReleases']:
                return RegistryPackageResultPublicReleases
            updatedBy = schemas.StrSchema
        
            @staticmethod
            def updatedAt() -> typing.Type['RegistryPackageResultUpdatedAt']:
                return RegistryPackageResultUpdatedAt
            __annotations__ = {
                "description": description,
                "name": name,
                "org": org,
                "latestRelease": latestRelease,
                "id": id,
                "publicReleases": publicReleases,
                "updatedBy": updatedBy,
                "updatedAt": updatedAt,
            }
    
    latestRelease: MetaOapg.properties.latestRelease
    org: MetaOapg.properties.org
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    id: MetaOapg.properties.id
    publicReleases: 'RegistryPackageResultPublicReleases'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org"]) -> MetaOapg.properties.org: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latestRelease"]) -> MetaOapg.properties.latestRelease: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publicReleases"]) -> 'RegistryPackageResultPublicReleases': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedBy"]) -> MetaOapg.properties.updatedBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> 'RegistryPackageResultUpdatedAt': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "name", "org", "latestRelease", "id", "publicReleases", "updatedBy", "updatedAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org"]) -> MetaOapg.properties.org: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latestRelease"]) -> MetaOapg.properties.latestRelease: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publicReleases"]) -> 'RegistryPackageResultPublicReleases': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedBy"]) -> typing.Union[MetaOapg.properties.updatedBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> typing.Union['RegistryPackageResultUpdatedAt', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "name", "org", "latestRelease", "id", "publicReleases", "updatedBy", "updatedAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        latestRelease: typing.Union[MetaOapg.properties.latestRelease, str, ],
        org: typing.Union[MetaOapg.properties.org, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        publicReleases: 'RegistryPackageResultPublicReleases',
        updatedBy: typing.Union[MetaOapg.properties.updatedBy, str, schemas.Unset] = schemas.unset,
        updatedAt: typing.Union['RegistryPackageResultUpdatedAt', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RegistryPackageResult':
        return super().__new__(
            cls,
            *args,
            latestRelease=latestRelease,
            org=org,
            name=name,
            description=description,
            id=id,
            publicReleases=publicReleases,
            updatedBy=updatedBy,
            updatedAt=updatedAt,
            _configuration=_configuration,
            **kwargs,
        )

from coalesce_python_sdk.model.registry_package_result_public_releases import RegistryPackageResultPublicReleases
from coalesce_python_sdk.model.registry_package_result_updated_at import RegistryPackageResultUpdatedAt
