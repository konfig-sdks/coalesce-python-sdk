# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coalesce_python_sdk import schemas  # noqa: F401


class JobsGetStatusUpdatesResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class runStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "completed": "COMPLETED",
                        "initializing": "INITIALIZING",
                        "rendering": "RENDERING",
                        "canceled": "CANCELED",
                        "failed": "FAILED",
                        "running": "RUNNING",
                        "waitingToRun": "WAITING_TO_RUN",
                    }
                
                @schemas.classproperty
                def COMPLETED(cls):
                    return cls("completed")
                
                @schemas.classproperty
                def INITIALIZING(cls):
                    return cls("initializing")
                
                @schemas.classproperty
                def RENDERING(cls):
                    return cls("rendering")
                
                @schemas.classproperty
                def CANCELED(cls):
                    return cls("canceled")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("failed")
                
                @schemas.classproperty
                def RUNNING(cls):
                    return cls("running")
                
                @schemas.classproperty
                def WAITING_TO_RUN(cls):
                    return cls("waitingToRun")
            
            
            class runType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "deploy": "DEPLOY",
                        "refresh": "REFRESH",
                    }
                
                @schemas.classproperty
                def DEPLOY(cls):
                    return cls("deploy")
                
                @schemas.classproperty
                def REFRESH(cls):
                    return cls("refresh")
            runLink = schemas.StrSchema
            __annotations__ = {
                "runStatus": runStatus,
                "runType": runType,
                "runLink": runLink,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runStatus"]) -> MetaOapg.properties.runStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runType"]) -> MetaOapg.properties.runType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runLink"]) -> MetaOapg.properties.runLink: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["runStatus", "runType", "runLink", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runStatus"]) -> typing.Union[MetaOapg.properties.runStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runType"]) -> typing.Union[MetaOapg.properties.runType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runLink"]) -> typing.Union[MetaOapg.properties.runLink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["runStatus", "runType", "runLink", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        runStatus: typing.Union[MetaOapg.properties.runStatus, str, schemas.Unset] = schemas.unset,
        runType: typing.Union[MetaOapg.properties.runType, str, schemas.Unset] = schemas.unset,
        runLink: typing.Union[MetaOapg.properties.runLink, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobsGetStatusUpdatesResponse':
        return super().__new__(
            cls,
            *args,
            runStatus=runStatus,
            runType=runType,
            runLink=runLink,
            _configuration=_configuration,
            **kwargs,
        )
