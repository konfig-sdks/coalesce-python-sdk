# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coalesce_python_sdk import schemas  # noqa: F401


class ColumnReference(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "columnID",
            "nodeID",
        }
        
        class properties:
            columnID = schemas.StrSchema
            nodeID = schemas.StrSchema
            __annotations__ = {
                "columnID": columnID,
                "nodeID": nodeID,
            }
    
    columnID: MetaOapg.properties.columnID
    nodeID: MetaOapg.properties.nodeID
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["columnID"]) -> MetaOapg.properties.columnID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodeID"]) -> MetaOapg.properties.nodeID: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["columnID", "nodeID", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["columnID"]) -> MetaOapg.properties.columnID: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodeID"]) -> MetaOapg.properties.nodeID: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["columnID", "nodeID", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        columnID: typing.Union[MetaOapg.properties.columnID, str, ],
        nodeID: typing.Union[MetaOapg.properties.nodeID, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ColumnReference':
        return super().__new__(
            cls,
            *args,
            columnID=columnID,
            nodeID=nodeID,
            _configuration=_configuration,
            **kwargs,
        )
