# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coalesce_python_sdk import schemas  # noqa: F401


class RegistryPackageReleaseResult(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A single release of a package in the registry.
    """


    class MetaOapg:
        required = {
            "createdAt",
            "createdBy",
            "releaseID",
            "packageID",
            "changeLog",
            "storagePath",
            "version",
        }
        
        class properties:
            version = schemas.StrSchema
            createdBy = schemas.StrSchema
        
            @staticmethod
            def createdAt() -> typing.Type['RegistryPackageReleaseResultCreatedAt']:
                return RegistryPackageReleaseResultCreatedAt
            changeLog = schemas.StrSchema
            packageID = schemas.StrSchema
            releaseID = schemas.StrSchema
            storagePath = schemas.StrSchema
            updatedBy = schemas.StrSchema
        
            @staticmethod
            def updatedAt() -> typing.Type['RegistryPackageReleaseResultUpdatedAt']:
                return RegistryPackageReleaseResultUpdatedAt
            __annotations__ = {
                "version": version,
                "createdBy": createdBy,
                "createdAt": createdAt,
                "changeLog": changeLog,
                "packageID": packageID,
                "releaseID": releaseID,
                "storagePath": storagePath,
                "updatedBy": updatedBy,
                "updatedAt": updatedAt,
            }
    
    createdAt: 'RegistryPackageReleaseResultCreatedAt'
    createdBy: MetaOapg.properties.createdBy
    releaseID: MetaOapg.properties.releaseID
    packageID: MetaOapg.properties.packageID
    changeLog: MetaOapg.properties.changeLog
    storagePath: MetaOapg.properties.storagePath
    version: MetaOapg.properties.version
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> 'RegistryPackageReleaseResultCreatedAt': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changeLog"]) -> MetaOapg.properties.changeLog: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["packageID"]) -> MetaOapg.properties.packageID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["releaseID"]) -> MetaOapg.properties.releaseID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storagePath"]) -> MetaOapg.properties.storagePath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedBy"]) -> MetaOapg.properties.updatedBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> 'RegistryPackageReleaseResultUpdatedAt': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "createdBy", "createdAt", "changeLog", "packageID", "releaseID", "storagePath", "updatedBy", "updatedAt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> 'RegistryPackageReleaseResultCreatedAt': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changeLog"]) -> MetaOapg.properties.changeLog: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["packageID"]) -> MetaOapg.properties.packageID: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["releaseID"]) -> MetaOapg.properties.releaseID: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storagePath"]) -> MetaOapg.properties.storagePath: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedBy"]) -> typing.Union[MetaOapg.properties.updatedBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> typing.Union['RegistryPackageReleaseResultUpdatedAt', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "createdBy", "createdAt", "changeLog", "packageID", "releaseID", "storagePath", "updatedBy", "updatedAt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        createdAt: 'RegistryPackageReleaseResultCreatedAt',
        createdBy: typing.Union[MetaOapg.properties.createdBy, str, ],
        releaseID: typing.Union[MetaOapg.properties.releaseID, str, ],
        packageID: typing.Union[MetaOapg.properties.packageID, str, ],
        changeLog: typing.Union[MetaOapg.properties.changeLog, str, ],
        storagePath: typing.Union[MetaOapg.properties.storagePath, str, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        updatedBy: typing.Union[MetaOapg.properties.updatedBy, str, schemas.Unset] = schemas.unset,
        updatedAt: typing.Union['RegistryPackageReleaseResultUpdatedAt', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RegistryPackageReleaseResult':
        return super().__new__(
            cls,
            *args,
            createdAt=createdAt,
            createdBy=createdBy,
            releaseID=releaseID,
            packageID=packageID,
            changeLog=changeLog,
            storagePath=storagePath,
            version=version,
            updatedBy=updatedBy,
            updatedAt=updatedAt,
            _configuration=_configuration,
            **kwargs,
        )

from coalesce_python_sdk.model.registry_package_release_result_created_at import RegistryPackageReleaseResultCreatedAt
from coalesce_python_sdk.model.registry_package_release_result_updated_at import RegistryPackageReleaseResultUpdatedAt
