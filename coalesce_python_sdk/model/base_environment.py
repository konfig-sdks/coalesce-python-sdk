# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coalesce_python_sdk import schemas  # noqa: F401


class BaseEnvironment(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    An environment is used for deploying your data pipeline to non-development Snowflake environments.
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            connectionAccount = schemas.StrSchema
            defaultStorageMapping = schemas.StrSchema
            name = schemas.StrSchema
            oauthEnabled = schemas.BoolSchema
        
            @staticmethod
            def runTimeParameters() -> typing.Type['BaseEnvironmentRunTimeParameters']:
                return BaseEnvironmentRunTimeParameters
        
            @staticmethod
            def tagColors() -> typing.Type['TagColor']:
                return TagColor
            project = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "connectionAccount": connectionAccount,
                "defaultStorageMapping": defaultStorageMapping,
                "name": name,
                "oauthEnabled": oauthEnabled,
                "runTimeParameters": runTimeParameters,
                "tagColors": tagColors,
                "project": project,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connectionAccount"]) -> MetaOapg.properties.connectionAccount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultStorageMapping"]) -> MetaOapg.properties.defaultStorageMapping: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oauthEnabled"]) -> MetaOapg.properties.oauthEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runTimeParameters"]) -> 'BaseEnvironmentRunTimeParameters': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tagColors"]) -> 'TagColor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> MetaOapg.properties.project: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description"], typing_extensions.Literal["connectionAccount"], typing_extensions.Literal["defaultStorageMapping"], typing_extensions.Literal["name"], typing_extensions.Literal["oauthEnabled"], typing_extensions.Literal["runTimeParameters"], typing_extensions.Literal["tagColors"], typing_extensions.Literal["project"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connectionAccount"]) -> typing.Union[MetaOapg.properties.connectionAccount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultStorageMapping"]) -> typing.Union[MetaOapg.properties.defaultStorageMapping, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oauthEnabled"]) -> typing.Union[MetaOapg.properties.oauthEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runTimeParameters"]) -> typing.Union['BaseEnvironmentRunTimeParameters', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tagColors"]) -> typing.Union['TagColor', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> typing.Union[MetaOapg.properties.project, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description"], typing_extensions.Literal["connectionAccount"], typing_extensions.Literal["defaultStorageMapping"], typing_extensions.Literal["name"], typing_extensions.Literal["oauthEnabled"], typing_extensions.Literal["runTimeParameters"], typing_extensions.Literal["tagColors"], typing_extensions.Literal["project"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        connectionAccount: typing.Union[MetaOapg.properties.connectionAccount, str, schemas.Unset] = schemas.unset,
        defaultStorageMapping: typing.Union[MetaOapg.properties.defaultStorageMapping, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        oauthEnabled: typing.Union[MetaOapg.properties.oauthEnabled, bool, schemas.Unset] = schemas.unset,
        runTimeParameters: typing.Union['BaseEnvironmentRunTimeParameters', schemas.Unset] = schemas.unset,
        tagColors: typing.Union['TagColor', schemas.Unset] = schemas.unset,
        project: typing.Union[MetaOapg.properties.project, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'BaseEnvironment':
        return super().__new__(
            cls,
            *args,
            description=description,
            connectionAccount=connectionAccount,
            defaultStorageMapping=defaultStorageMapping,
            name=name,
            oauthEnabled=oauthEnabled,
            runTimeParameters=runTimeParameters,
            tagColors=tagColors,
            project=project,
            _configuration=_configuration,
            **kwargs,
        )

from coalesce_python_sdk.model.base_environment_run_time_parameters import BaseEnvironmentRunTimeParameters
from coalesce_python_sdk.model.tag_color import TagColor
