# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coalesce_python_sdk import schemas  # noqa: F401


class JobsTriggerRerunRequestUserCredentials(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    userCredentials contains connection credentials for connecting to Snowflake. Currently only basic auth (username/password) may be specified. If however, an OAuth connection has been established for the given environment specified in runDetails.environmentID, you may ommit userCredentials. In that case, Coalesce will use the OAuth connection to connect with Snowflake.
    """


    class MetaOapg:
        
        class properties:
            snowflakeUsername = schemas.StrSchema
            snowflakePassword = schemas.StrSchema
            snowflakeKeyPairKey = schemas.StrSchema
            snowflakeKeyPairPass = schemas.StrSchema
            snowflakeWarehouse = schemas.StrSchema
            snowflakeRole = schemas.StrSchema
            snowflakeAuthType = schemas.StrSchema
            __annotations__ = {
                "snowflakeUsername": snowflakeUsername,
                "snowflakePassword": snowflakePassword,
                "snowflakeKeyPairKey": snowflakeKeyPairKey,
                "snowflakeKeyPairPass": snowflakeKeyPairPass,
                "snowflakeWarehouse": snowflakeWarehouse,
                "snowflakeRole": snowflakeRole,
                "snowflakeAuthType": snowflakeAuthType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snowflakeUsername"]) -> MetaOapg.properties.snowflakeUsername: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snowflakePassword"]) -> MetaOapg.properties.snowflakePassword: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snowflakeKeyPairKey"]) -> MetaOapg.properties.snowflakeKeyPairKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snowflakeKeyPairPass"]) -> MetaOapg.properties.snowflakeKeyPairPass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snowflakeWarehouse"]) -> MetaOapg.properties.snowflakeWarehouse: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snowflakeRole"]) -> MetaOapg.properties.snowflakeRole: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snowflakeAuthType"]) -> MetaOapg.properties.snowflakeAuthType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["snowflakeUsername", "snowflakePassword", "snowflakeKeyPairKey", "snowflakeKeyPairPass", "snowflakeWarehouse", "snowflakeRole", "snowflakeAuthType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snowflakeUsername"]) -> typing.Union[MetaOapg.properties.snowflakeUsername, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snowflakePassword"]) -> typing.Union[MetaOapg.properties.snowflakePassword, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snowflakeKeyPairKey"]) -> typing.Union[MetaOapg.properties.snowflakeKeyPairKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snowflakeKeyPairPass"]) -> typing.Union[MetaOapg.properties.snowflakeKeyPairPass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snowflakeWarehouse"]) -> typing.Union[MetaOapg.properties.snowflakeWarehouse, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snowflakeRole"]) -> typing.Union[MetaOapg.properties.snowflakeRole, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snowflakeAuthType"]) -> typing.Union[MetaOapg.properties.snowflakeAuthType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["snowflakeUsername", "snowflakePassword", "snowflakeKeyPairKey", "snowflakeKeyPairPass", "snowflakeWarehouse", "snowflakeRole", "snowflakeAuthType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        snowflakeUsername: typing.Union[MetaOapg.properties.snowflakeUsername, str, schemas.Unset] = schemas.unset,
        snowflakePassword: typing.Union[MetaOapg.properties.snowflakePassword, str, schemas.Unset] = schemas.unset,
        snowflakeKeyPairKey: typing.Union[MetaOapg.properties.snowflakeKeyPairKey, str, schemas.Unset] = schemas.unset,
        snowflakeKeyPairPass: typing.Union[MetaOapg.properties.snowflakeKeyPairPass, str, schemas.Unset] = schemas.unset,
        snowflakeWarehouse: typing.Union[MetaOapg.properties.snowflakeWarehouse, str, schemas.Unset] = schemas.unset,
        snowflakeRole: typing.Union[MetaOapg.properties.snowflakeRole, str, schemas.Unset] = schemas.unset,
        snowflakeAuthType: typing.Union[MetaOapg.properties.snowflakeAuthType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobsTriggerRerunRequestUserCredentials':
        return super().__new__(
            cls,
            *args,
            snowflakeUsername=snowflakeUsername,
            snowflakePassword=snowflakePassword,
            snowflakeKeyPairKey=snowflakeKeyPairKey,
            snowflakeKeyPairPass=snowflakeKeyPairPass,
            snowflakeWarehouse=snowflakeWarehouse,
            snowflakeRole=snowflakeRole,
            snowflakeAuthType=snowflakeAuthType,
            _configuration=_configuration,
            **kwargs,
        )
