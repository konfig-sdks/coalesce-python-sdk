# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coalesce_python_sdk import schemas  # noqa: F401


class PackageUpdateReleaseInfo(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Package release information for an update operation.
    """


    class MetaOapg:
        required = {
            "releaseID",
            "changeLog",
            "version",
        }
        
        class properties:
            version = schemas.StrSchema
            changeLog = schemas.StrSchema
            releaseID = schemas.StrSchema
            __annotations__ = {
                "version": version,
                "changeLog": changeLog,
                "releaseID": releaseID,
            }
    
    releaseID: MetaOapg.properties.releaseID
    changeLog: MetaOapg.properties.changeLog
    version: MetaOapg.properties.version
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changeLog"]) -> MetaOapg.properties.changeLog: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["releaseID"]) -> MetaOapg.properties.releaseID: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "changeLog", "releaseID", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changeLog"]) -> MetaOapg.properties.changeLog: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["releaseID"]) -> MetaOapg.properties.releaseID: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "changeLog", "releaseID", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        releaseID: typing.Union[MetaOapg.properties.releaseID, str, ],
        changeLog: typing.Union[MetaOapg.properties.changeLog, str, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PackageUpdateReleaseInfo':
        return super().__new__(
            cls,
            *args,
            releaseID=releaseID,
            changeLog=changeLog,
            version=version,
            _configuration=_configuration,
            **kwargs,
        )
