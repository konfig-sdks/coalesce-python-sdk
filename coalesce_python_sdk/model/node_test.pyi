# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coalesce_python_sdk import schemas  # noqa: F401


class NodeTest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "runOrder",
            "name",
            "continueOnFailure",
            "description",
            "templateString",
        }
        
        class properties:
            description = schemas.StrSchema
            continueOnFailure = schemas.BoolSchema
            name = schemas.StrSchema
        
            @staticmethod
            def runOrder() -> typing.Type['TestRunOrder']:
                return TestRunOrder
            templateString = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "continueOnFailure": continueOnFailure,
                "name": name,
                "runOrder": runOrder,
                "templateString": templateString,
            }
    
    runOrder: 'TestRunOrder'
    name: MetaOapg.properties.name
    continueOnFailure: MetaOapg.properties.continueOnFailure
    description: MetaOapg.properties.description
    templateString: MetaOapg.properties.templateString
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["continueOnFailure"]) -> MetaOapg.properties.continueOnFailure: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runOrder"]) -> 'TestRunOrder': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["templateString"]) -> MetaOapg.properties.templateString: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "continueOnFailure", "name", "runOrder", "templateString", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["continueOnFailure"]) -> MetaOapg.properties.continueOnFailure: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runOrder"]) -> 'TestRunOrder': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["templateString"]) -> MetaOapg.properties.templateString: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "continueOnFailure", "name", "runOrder", "templateString", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        runOrder: 'TestRunOrder',
        name: typing.Union[MetaOapg.properties.name, str, ],
        continueOnFailure: typing.Union[MetaOapg.properties.continueOnFailure, bool, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        templateString: typing.Union[MetaOapg.properties.templateString, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NodeTest':
        return super().__new__(
            cls,
            *args,
            runOrder=runOrder,
            name=name,
            continueOnFailure=continueOnFailure,
            description=description,
            templateString=templateString,
            _configuration=_configuration,
            **kwargs,
        )

from coalesce_python_sdk.model.test_run_order import TestRunOrder
