# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coalesce_python_sdk import schemas  # noqa: F401


class RefreshRunDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "environmentID",
        }
        
        class properties:
            environmentID = schemas.StrSchema
            canceled = schemas.BoolSchema
            excludeNodesSelector = schemas.StrSchema
            forceIgnoreEnvironmentStatus = schemas.BoolSchema
            includeNodesSelector = schemas.StrSchema
            jobID = schemas.IntSchema
            parallelism = schemas.IntSchema
            refreshDescription = schemas.StrSchema
            nodesForRefresh = schemas.IntSchema
            nodesInRun = schemas.IntSchema
            __annotations__ = {
                "environmentID": environmentID,
                "canceled": canceled,
                "excludeNodesSelector": excludeNodesSelector,
                "forceIgnoreEnvironmentStatus": forceIgnoreEnvironmentStatus,
                "includeNodesSelector": includeNodesSelector,
                "jobID": jobID,
                "parallelism": parallelism,
                "refreshDescription": refreshDescription,
                "nodesForRefresh": nodesForRefresh,
                "nodesInRun": nodesInRun,
            }
    
    environmentID: MetaOapg.properties.environmentID
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environmentID"]) -> MetaOapg.properties.environmentID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canceled"]) -> MetaOapg.properties.canceled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excludeNodesSelector"]) -> MetaOapg.properties.excludeNodesSelector: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forceIgnoreEnvironmentStatus"]) -> MetaOapg.properties.forceIgnoreEnvironmentStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeNodesSelector"]) -> MetaOapg.properties.includeNodesSelector: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobID"]) -> MetaOapg.properties.jobID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parallelism"]) -> MetaOapg.properties.parallelism: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refreshDescription"]) -> MetaOapg.properties.refreshDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodesForRefresh"]) -> MetaOapg.properties.nodesForRefresh: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodesInRun"]) -> MetaOapg.properties.nodesInRun: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["environmentID", "canceled", "excludeNodesSelector", "forceIgnoreEnvironmentStatus", "includeNodesSelector", "jobID", "parallelism", "refreshDescription", "nodesForRefresh", "nodesInRun", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environmentID"]) -> MetaOapg.properties.environmentID: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canceled"]) -> typing.Union[MetaOapg.properties.canceled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excludeNodesSelector"]) -> typing.Union[MetaOapg.properties.excludeNodesSelector, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forceIgnoreEnvironmentStatus"]) -> typing.Union[MetaOapg.properties.forceIgnoreEnvironmentStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeNodesSelector"]) -> typing.Union[MetaOapg.properties.includeNodesSelector, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobID"]) -> typing.Union[MetaOapg.properties.jobID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parallelism"]) -> typing.Union[MetaOapg.properties.parallelism, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refreshDescription"]) -> typing.Union[MetaOapg.properties.refreshDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodesForRefresh"]) -> typing.Union[MetaOapg.properties.nodesForRefresh, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodesInRun"]) -> typing.Union[MetaOapg.properties.nodesInRun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["environmentID", "canceled", "excludeNodesSelector", "forceIgnoreEnvironmentStatus", "includeNodesSelector", "jobID", "parallelism", "refreshDescription", "nodesForRefresh", "nodesInRun", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        environmentID: typing.Union[MetaOapg.properties.environmentID, str, ],
        canceled: typing.Union[MetaOapg.properties.canceled, bool, schemas.Unset] = schemas.unset,
        excludeNodesSelector: typing.Union[MetaOapg.properties.excludeNodesSelector, str, schemas.Unset] = schemas.unset,
        forceIgnoreEnvironmentStatus: typing.Union[MetaOapg.properties.forceIgnoreEnvironmentStatus, bool, schemas.Unset] = schemas.unset,
        includeNodesSelector: typing.Union[MetaOapg.properties.includeNodesSelector, str, schemas.Unset] = schemas.unset,
        jobID: typing.Union[MetaOapg.properties.jobID, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        parallelism: typing.Union[MetaOapg.properties.parallelism, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        refreshDescription: typing.Union[MetaOapg.properties.refreshDescription, str, schemas.Unset] = schemas.unset,
        nodesForRefresh: typing.Union[MetaOapg.properties.nodesForRefresh, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        nodesInRun: typing.Union[MetaOapg.properties.nodesInRun, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RefreshRunDetails':
        return super().__new__(
            cls,
            *args,
            environmentID=environmentID,
            canceled=canceled,
            excludeNodesSelector=excludeNodesSelector,
            forceIgnoreEnvironmentStatus=forceIgnoreEnvironmentStatus,
            includeNodesSelector=includeNodesSelector,
            jobID=jobID,
            parallelism=parallelism,
            refreshDescription=refreshDescription,
            nodesForRefresh=nodesForRefresh,
            nodesInRun=nodesInRun,
            _configuration=_configuration,
            **kwargs,
        )
