# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coalesce_python_sdk import schemas  # noqa: F401


class NodeType(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class any_of_0(
            schemas.EnumBase,
            schemas.StrSchema
        ):
            
            @schemas.classproperty
            def DIMENSION(cls):
                return cls("Dimension")
            
            @schemas.classproperty
            def FACT(cls):
                return cls("Fact")
            
            @schemas.classproperty
            def HUB(cls):
                return cls("Hub")
            
            @schemas.classproperty
            def LINK(cls):
                return cls("Link")
            
            @schemas.classproperty
            def SATELLITE(cls):
                return cls("Satellite")
            
            @schemas.classproperty
            def SOURCE(cls):
                return cls("Source")
            
            @schemas.classproperty
            def STAGE(cls):
                return cls("Stage")
            
            @schemas.classproperty
            def VIEW(cls):
                return cls("View")
            
            @schemas.classproperty
            def PERSISTENT_STAGE(cls):
                return cls("persistentStage")
        any_of_1 = schemas.StrSchema
        
        @classmethod
        @functools.lru_cache()
        def any_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.any_of_0,
                cls.any_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NodeType':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
