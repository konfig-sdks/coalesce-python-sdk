# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coalesce_python_sdk import schemas  # noqa: F401


class SQLNodeMetadata(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "enabledColumnTestIDs",
            "columns",
            "appliedNodeTests",
            "sourceMapping",
        }
        
        class properties:
            
            
            class appliedNodeTests(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NodeTest']:
                        return NodeTest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['NodeTest'], typing.List['NodeTest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'appliedNodeTests':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NodeTest':
                    return super().__getitem__(i)
            
            
            class columns(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ColumnMetadata']:
                        return ColumnMetadata
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ColumnMetadata'], typing.List['ColumnMetadata']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'columns':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ColumnMetadata':
                    return super().__getitem__(i)
        
            @staticmethod
            def enabledColumnTestIDs() -> typing.Type['SQLNodeMetadataEnabledColumnTestIDs']:
                return SQLNodeMetadataEnabledColumnTestIDs
            
            
            class sourceMapping(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SourceMap']:
                        return SourceMap
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SourceMap'], typing.List['SourceMap']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sourceMapping':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SourceMap':
                    return super().__getitem__(i)
            description = schemas.StrSchema
            cteString = schemas.StrSchema
            destinationName = schemas.StrSchema
        
            @staticmethod
            def mapping() -> typing.Type['SQLNodeMetadataMapping']:
                return SQLNodeMetadataMapping
            materializationOption = schemas.StrSchema
            __annotations__ = {
                "appliedNodeTests": appliedNodeTests,
                "columns": columns,
                "enabledColumnTestIDs": enabledColumnTestIDs,
                "sourceMapping": sourceMapping,
                "description": description,
                "cteString": cteString,
                "destinationName": destinationName,
                "mapping": mapping,
                "materializationOption": materializationOption,
            }
    
    enabledColumnTestIDs: 'SQLNodeMetadataEnabledColumnTestIDs'
    columns: MetaOapg.properties.columns
    appliedNodeTests: MetaOapg.properties.appliedNodeTests
    sourceMapping: MetaOapg.properties.sourceMapping
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appliedNodeTests"]) -> MetaOapg.properties.appliedNodeTests: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["columns"]) -> MetaOapg.properties.columns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabledColumnTestIDs"]) -> 'SQLNodeMetadataEnabledColumnTestIDs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceMapping"]) -> MetaOapg.properties.sourceMapping: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cteString"]) -> MetaOapg.properties.cteString: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destinationName"]) -> MetaOapg.properties.destinationName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mapping"]) -> 'SQLNodeMetadataMapping': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["materializationOption"]) -> MetaOapg.properties.materializationOption: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["appliedNodeTests", "columns", "enabledColumnTestIDs", "sourceMapping", "description", "cteString", "destinationName", "mapping", "materializationOption", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appliedNodeTests"]) -> MetaOapg.properties.appliedNodeTests: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["columns"]) -> MetaOapg.properties.columns: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabledColumnTestIDs"]) -> 'SQLNodeMetadataEnabledColumnTestIDs': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceMapping"]) -> MetaOapg.properties.sourceMapping: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cteString"]) -> typing.Union[MetaOapg.properties.cteString, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destinationName"]) -> typing.Union[MetaOapg.properties.destinationName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mapping"]) -> typing.Union['SQLNodeMetadataMapping', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["materializationOption"]) -> typing.Union[MetaOapg.properties.materializationOption, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["appliedNodeTests", "columns", "enabledColumnTestIDs", "sourceMapping", "description", "cteString", "destinationName", "mapping", "materializationOption", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        enabledColumnTestIDs: 'SQLNodeMetadataEnabledColumnTestIDs',
        columns: typing.Union[MetaOapg.properties.columns, list, tuple, ],
        appliedNodeTests: typing.Union[MetaOapg.properties.appliedNodeTests, list, tuple, ],
        sourceMapping: typing.Union[MetaOapg.properties.sourceMapping, list, tuple, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        cteString: typing.Union[MetaOapg.properties.cteString, str, schemas.Unset] = schemas.unset,
        destinationName: typing.Union[MetaOapg.properties.destinationName, str, schemas.Unset] = schemas.unset,
        mapping: typing.Union['SQLNodeMetadataMapping', schemas.Unset] = schemas.unset,
        materializationOption: typing.Union[MetaOapg.properties.materializationOption, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SQLNodeMetadata':
        return super().__new__(
            cls,
            *args,
            enabledColumnTestIDs=enabledColumnTestIDs,
            columns=columns,
            appliedNodeTests=appliedNodeTests,
            sourceMapping=sourceMapping,
            description=description,
            cteString=cteString,
            destinationName=destinationName,
            mapping=mapping,
            materializationOption=materializationOption,
            _configuration=_configuration,
            **kwargs,
        )

from coalesce_python_sdk.model.column_metadata import ColumnMetadata
from coalesce_python_sdk.model.node_test import NodeTest
from coalesce_python_sdk.model.source_map import SourceMap
from coalesce_python_sdk.model.sql_node_metadata_enabled_column_test_ids import SQLNodeMetadataEnabledColumnTestIDs
from coalesce_python_sdk.model.sql_node_metadata_mapping import SQLNodeMetadataMapping
