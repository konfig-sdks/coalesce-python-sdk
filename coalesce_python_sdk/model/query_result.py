# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coalesce_python_sdk import schemas  # noqa: F401


class QueryResult(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "isRunning",
            "success",
            "name",
            "sql",
            "status",
        }
        
        class properties:
            isRunning = schemas.BoolSchema
            name = schemas.StrSchema
            sql = schemas.StrSchema
            status = schemas.StrSchema
            success = schemas.BoolSchema
            endTime = schemas.DateTimeSchema
        
            @staticmethod
            def error() -> typing.Type['Error']:
                return Error
            queryID = schemas.StrSchema
            rowsDeleted = schemas.IntSchema
            rowsInserted = schemas.IntSchema
            rowsUpdated = schemas.IntSchema
            startTime = schemas.DateTimeSchema
            warehouse = schemas.StrSchema
            __annotations__ = {
                "isRunning": isRunning,
                "name": name,
                "sql": sql,
                "status": status,
                "success": success,
                "endTime": endTime,
                "error": error,
                "queryID": queryID,
                "rowsDeleted": rowsDeleted,
                "rowsInserted": rowsInserted,
                "rowsUpdated": rowsUpdated,
                "startTime": startTime,
                "warehouse": warehouse,
            }
    
    isRunning: MetaOapg.properties.isRunning
    success: MetaOapg.properties.success
    name: MetaOapg.properties.name
    sql: MetaOapg.properties.sql
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isRunning"]) -> MetaOapg.properties.isRunning: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sql"]) -> MetaOapg.properties.sql: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["success"]) -> MetaOapg.properties.success: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endTime"]) -> MetaOapg.properties.endTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> 'Error': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["queryID"]) -> MetaOapg.properties.queryID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rowsDeleted"]) -> MetaOapg.properties.rowsDeleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rowsInserted"]) -> MetaOapg.properties.rowsInserted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rowsUpdated"]) -> MetaOapg.properties.rowsUpdated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startTime"]) -> MetaOapg.properties.startTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["warehouse"]) -> MetaOapg.properties.warehouse: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["isRunning", "name", "sql", "status", "success", "endTime", "error", "queryID", "rowsDeleted", "rowsInserted", "rowsUpdated", "startTime", "warehouse", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isRunning"]) -> MetaOapg.properties.isRunning: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sql"]) -> MetaOapg.properties.sql: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["success"]) -> MetaOapg.properties.success: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endTime"]) -> typing.Union[MetaOapg.properties.endTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> typing.Union['Error', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["queryID"]) -> typing.Union[MetaOapg.properties.queryID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rowsDeleted"]) -> typing.Union[MetaOapg.properties.rowsDeleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rowsInserted"]) -> typing.Union[MetaOapg.properties.rowsInserted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rowsUpdated"]) -> typing.Union[MetaOapg.properties.rowsUpdated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startTime"]) -> typing.Union[MetaOapg.properties.startTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["warehouse"]) -> typing.Union[MetaOapg.properties.warehouse, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["isRunning", "name", "sql", "status", "success", "endTime", "error", "queryID", "rowsDeleted", "rowsInserted", "rowsUpdated", "startTime", "warehouse", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        isRunning: typing.Union[MetaOapg.properties.isRunning, bool, ],
        success: typing.Union[MetaOapg.properties.success, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        sql: typing.Union[MetaOapg.properties.sql, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        endTime: typing.Union[MetaOapg.properties.endTime, str, datetime, schemas.Unset] = schemas.unset,
        error: typing.Union['Error', schemas.Unset] = schemas.unset,
        queryID: typing.Union[MetaOapg.properties.queryID, str, schemas.Unset] = schemas.unset,
        rowsDeleted: typing.Union[MetaOapg.properties.rowsDeleted, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rowsInserted: typing.Union[MetaOapg.properties.rowsInserted, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rowsUpdated: typing.Union[MetaOapg.properties.rowsUpdated, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        startTime: typing.Union[MetaOapg.properties.startTime, str, datetime, schemas.Unset] = schemas.unset,
        warehouse: typing.Union[MetaOapg.properties.warehouse, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'QueryResult':
        return super().__new__(
            cls,
            *args,
            isRunning=isRunning,
            success=success,
            name=name,
            sql=sql,
            status=status,
            endTime=endTime,
            error=error,
            queryID=queryID,
            rowsDeleted=rowsDeleted,
            rowsInserted=rowsInserted,
            rowsUpdated=rowsUpdated,
            startTime=startTime,
            warehouse=warehouse,
            _configuration=_configuration,
            **kwargs,
        )

from coalesce_python_sdk.model.error import Error
