# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coalesce_python_sdk import schemas  # noqa: F401


class DeployRunDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "environmentID",
            "deployCommit",
        }
        
        class properties:
            deployCommit = schemas.StrSchema
            environmentID = schemas.StrSchema
            canceled = schemas.BoolSchema
            deployCommitMessage = schemas.StrSchema
            parallelism = schemas.IntSchema
            nodesInRun = schemas.IntSchema
            __annotations__ = {
                "deployCommit": deployCommit,
                "environmentID": environmentID,
                "canceled": canceled,
                "deployCommitMessage": deployCommitMessage,
                "parallelism": parallelism,
                "nodesInRun": nodesInRun,
            }
    
    environmentID: MetaOapg.properties.environmentID
    deployCommit: MetaOapg.properties.deployCommit
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deployCommit"]) -> MetaOapg.properties.deployCommit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environmentID"]) -> MetaOapg.properties.environmentID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canceled"]) -> MetaOapg.properties.canceled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deployCommitMessage"]) -> MetaOapg.properties.deployCommitMessage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parallelism"]) -> MetaOapg.properties.parallelism: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodesInRun"]) -> MetaOapg.properties.nodesInRun: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["deployCommit", "environmentID", "canceled", "deployCommitMessage", "parallelism", "nodesInRun", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deployCommit"]) -> MetaOapg.properties.deployCommit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environmentID"]) -> MetaOapg.properties.environmentID: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canceled"]) -> typing.Union[MetaOapg.properties.canceled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deployCommitMessage"]) -> typing.Union[MetaOapg.properties.deployCommitMessage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parallelism"]) -> typing.Union[MetaOapg.properties.parallelism, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodesInRun"]) -> typing.Union[MetaOapg.properties.nodesInRun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["deployCommit", "environmentID", "canceled", "deployCommitMessage", "parallelism", "nodesInRun", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        environmentID: typing.Union[MetaOapg.properties.environmentID, str, ],
        deployCommit: typing.Union[MetaOapg.properties.deployCommit, str, ],
        canceled: typing.Union[MetaOapg.properties.canceled, bool, schemas.Unset] = schemas.unset,
        deployCommitMessage: typing.Union[MetaOapg.properties.deployCommitMessage, str, schemas.Unset] = schemas.unset,
        parallelism: typing.Union[MetaOapg.properties.parallelism, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        nodesInRun: typing.Union[MetaOapg.properties.nodesInRun, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeployRunDetails':
        return super().__new__(
            cls,
            *args,
            environmentID=environmentID,
            deployCommit=deployCommit,
            canceled=canceled,
            deployCommitMessage=deployCommitMessage,
            parallelism=parallelism,
            nodesInRun=nodesInRun,
            _configuration=_configuration,
            **kwargs,
        )
