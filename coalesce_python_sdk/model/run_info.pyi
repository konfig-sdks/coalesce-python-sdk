# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coalesce_python_sdk import schemas  # noqa: F401


class RunInfo(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The full details of a run, without the run results.
    """


    class MetaOapg:
        required = {
            "runTimeParameters",
            "runType",
            "runDetails",
            "id",
            "runStatus",
        }
        
        class properties:
            id = schemas.IntSchema
        
            @staticmethod
            def runDetails() -> typing.Type['RunDetails']:
                return RunDetails
        
            @staticmethod
            def runStatus() -> typing.Type['RunStatus']:
                return RunStatus
        
            @staticmethod
            def runTimeParameters() -> typing.Type['RunInfoRunTimeParameters']:
                return RunInfoRunTimeParameters
        
            @staticmethod
            def runType() -> typing.Type['RunType']:
                return RunType
            version = schemas.IntSchema
            reRunID = schemas.StrSchema
            runEndTime = schemas.DateTimeSchema
        
            @staticmethod
            def runHistory() -> typing.Type['RunInfoRunHistory']:
                return RunInfoRunHistory
            runStartTime = schemas.DateTimeSchema
        
            @staticmethod
            def userCredentials() -> typing.Type['SnowflakeUserCredentials']:
                return SnowflakeUserCredentials
            userID = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "runDetails": runDetails,
                "runStatus": runStatus,
                "runTimeParameters": runTimeParameters,
                "runType": runType,
                "version": version,
                "reRunID": reRunID,
                "runEndTime": runEndTime,
                "runHistory": runHistory,
                "runStartTime": runStartTime,
                "userCredentials": userCredentials,
                "userID": userID,
            }
    
    runTimeParameters: 'RunInfoRunTimeParameters'
    runType: 'RunType'
    runDetails: 'RunDetails'
    id: MetaOapg.properties.id
    runStatus: 'RunStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runDetails"]) -> 'RunDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runStatus"]) -> 'RunStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runTimeParameters"]) -> 'RunInfoRunTimeParameters': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runType"]) -> 'RunType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reRunID"]) -> MetaOapg.properties.reRunID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runEndTime"]) -> MetaOapg.properties.runEndTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runHistory"]) -> 'RunInfoRunHistory': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runStartTime"]) -> MetaOapg.properties.runStartTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userCredentials"]) -> 'SnowflakeUserCredentials': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userID"]) -> MetaOapg.properties.userID: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "runDetails", "runStatus", "runTimeParameters", "runType", "version", "reRunID", "runEndTime", "runHistory", "runStartTime", "userCredentials", "userID", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runDetails"]) -> 'RunDetails': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runStatus"]) -> 'RunStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runTimeParameters"]) -> 'RunInfoRunTimeParameters': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runType"]) -> 'RunType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reRunID"]) -> typing.Union[MetaOapg.properties.reRunID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runEndTime"]) -> typing.Union[MetaOapg.properties.runEndTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runHistory"]) -> typing.Union['RunInfoRunHistory', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runStartTime"]) -> typing.Union[MetaOapg.properties.runStartTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userCredentials"]) -> typing.Union['SnowflakeUserCredentials', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userID"]) -> typing.Union[MetaOapg.properties.userID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "runDetails", "runStatus", "runTimeParameters", "runType", "version", "reRunID", "runEndTime", "runHistory", "runStartTime", "userCredentials", "userID", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        runTimeParameters: 'RunInfoRunTimeParameters',
        runType: 'RunType',
        runDetails: 'RunDetails',
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        runStatus: 'RunStatus',
        version: typing.Union[MetaOapg.properties.version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        reRunID: typing.Union[MetaOapg.properties.reRunID, str, schemas.Unset] = schemas.unset,
        runEndTime: typing.Union[MetaOapg.properties.runEndTime, str, datetime, schemas.Unset] = schemas.unset,
        runHistory: typing.Union['RunInfoRunHistory', schemas.Unset] = schemas.unset,
        runStartTime: typing.Union[MetaOapg.properties.runStartTime, str, datetime, schemas.Unset] = schemas.unset,
        userCredentials: typing.Union['SnowflakeUserCredentials', schemas.Unset] = schemas.unset,
        userID: typing.Union[MetaOapg.properties.userID, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RunInfo':
        return super().__new__(
            cls,
            *args,
            runTimeParameters=runTimeParameters,
            runType=runType,
            runDetails=runDetails,
            id=id,
            runStatus=runStatus,
            version=version,
            reRunID=reRunID,
            runEndTime=runEndTime,
            runHistory=runHistory,
            runStartTime=runStartTime,
            userCredentials=userCredentials,
            userID=userID,
            _configuration=_configuration,
            **kwargs,
        )

from coalesce_python_sdk.model.run_details import RunDetails
from coalesce_python_sdk.model.run_info_run_history import RunInfoRunHistory
from coalesce_python_sdk.model.run_info_run_time_parameters import RunInfoRunTimeParameters
from coalesce_python_sdk.model.run_status import RunStatus
from coalesce_python_sdk.model.run_type import RunType
from coalesce_python_sdk.model.snowflake_user_credentials import SnowflakeUserCredentials
