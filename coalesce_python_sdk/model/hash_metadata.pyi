# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coalesce_python_sdk import schemas  # noqa: F401


class HashMetadata(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "hashAlgorithm",
        }
        
        class properties:
        
            @staticmethod
            def hashAlgorithm() -> typing.Type['HashAlgorithm']:
                return HashAlgorithm
            
            
            class hashType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CHANGE_HASH(cls):
                    return cls("ChangeHash")
                
                @schemas.classproperty
                def HASH(cls):
                    return cls("Hash")
                
                @schemas.classproperty
                def HUB_HASH(cls):
                    return cls("HubHash")
                
                @schemas.classproperty
                def LINK_HASH(cls):
                    return cls("LinkHash")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("None")
            
            
            class hubHashes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ColumnReference']:
                        return ColumnReference
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ColumnReference'], typing.List['ColumnReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hubHashes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ColumnReference':
                    return super().__getitem__(i)
            __annotations__ = {
                "hashAlgorithm": hashAlgorithm,
                "hashType": hashType,
                "hubHashes": hubHashes,
            }
    
    hashAlgorithm: 'HashAlgorithm'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hashAlgorithm"]) -> 'HashAlgorithm': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hashType"]) -> MetaOapg.properties.hashType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hubHashes"]) -> MetaOapg.properties.hubHashes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["hashAlgorithm", "hashType", "hubHashes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hashAlgorithm"]) -> 'HashAlgorithm': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hashType"]) -> typing.Union[MetaOapg.properties.hashType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hubHashes"]) -> typing.Union[MetaOapg.properties.hubHashes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["hashAlgorithm", "hashType", "hubHashes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        hashAlgorithm: 'HashAlgorithm',
        hashType: typing.Union[MetaOapg.properties.hashType, str, schemas.Unset] = schemas.unset,
        hubHashes: typing.Union[MetaOapg.properties.hubHashes, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'HashMetadata':
        return super().__new__(
            cls,
            *args,
            hashAlgorithm=hashAlgorithm,
            hashType=hashType,
            hubHashes=hubHashes,
            _configuration=_configuration,
            **kwargs,
        )

from coalesce_python_sdk.model.column_reference import ColumnReference
from coalesce_python_sdk.model.hash_algorithm import HashAlgorithm
