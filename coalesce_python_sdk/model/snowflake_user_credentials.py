# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coalesce_python_sdk import schemas  # noqa: F401


class SnowflakeUserCredentials(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information about the Snowflake account used to perform a run.
    """


    class MetaOapg:
        required = {
            "snowflakeUsername",
            "snowflakeAuthType",
            "snowflakeAccount",
        }
        
        class properties:
            snowflakeAccount = schemas.StrSchema
        
            @staticmethod
            def snowflakeAuthType() -> typing.Type['UserConnectionType']:
                return UserConnectionType
            snowflakeUsername = schemas.StrSchema
            snowflakeRole = schemas.StrSchema
            snowflakeWarehouse = schemas.StrSchema
            __annotations__ = {
                "snowflakeAccount": snowflakeAccount,
                "snowflakeAuthType": snowflakeAuthType,
                "snowflakeUsername": snowflakeUsername,
                "snowflakeRole": snowflakeRole,
                "snowflakeWarehouse": snowflakeWarehouse,
            }
    
    snowflakeUsername: MetaOapg.properties.snowflakeUsername
    snowflakeAuthType: 'UserConnectionType'
    snowflakeAccount: MetaOapg.properties.snowflakeAccount
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snowflakeAccount"]) -> MetaOapg.properties.snowflakeAccount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snowflakeAuthType"]) -> 'UserConnectionType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snowflakeUsername"]) -> MetaOapg.properties.snowflakeUsername: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snowflakeRole"]) -> MetaOapg.properties.snowflakeRole: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snowflakeWarehouse"]) -> MetaOapg.properties.snowflakeWarehouse: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["snowflakeAccount", "snowflakeAuthType", "snowflakeUsername", "snowflakeRole", "snowflakeWarehouse", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snowflakeAccount"]) -> MetaOapg.properties.snowflakeAccount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snowflakeAuthType"]) -> 'UserConnectionType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snowflakeUsername"]) -> MetaOapg.properties.snowflakeUsername: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snowflakeRole"]) -> typing.Union[MetaOapg.properties.snowflakeRole, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snowflakeWarehouse"]) -> typing.Union[MetaOapg.properties.snowflakeWarehouse, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["snowflakeAccount", "snowflakeAuthType", "snowflakeUsername", "snowflakeRole", "snowflakeWarehouse", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        snowflakeUsername: typing.Union[MetaOapg.properties.snowflakeUsername, str, ],
        snowflakeAuthType: 'UserConnectionType',
        snowflakeAccount: typing.Union[MetaOapg.properties.snowflakeAccount, str, ],
        snowflakeRole: typing.Union[MetaOapg.properties.snowflakeRole, str, schemas.Unset] = schemas.unset,
        snowflakeWarehouse: typing.Union[MetaOapg.properties.snowflakeWarehouse, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SnowflakeUserCredentials':
        return super().__new__(
            cls,
            *args,
            snowflakeUsername=snowflakeUsername,
            snowflakeAuthType=snowflakeAuthType,
            snowflakeAccount=snowflakeAccount,
            snowflakeRole=snowflakeRole,
            snowflakeWarehouse=snowflakeWarehouse,
            _configuration=_configuration,
            **kwargs,
        )

from coalesce_python_sdk.model.user_connection_type import UserConnectionType
