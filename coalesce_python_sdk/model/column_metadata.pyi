# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coalesce_python_sdk import schemas  # noqa: F401


class ColumnMetadata(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "nullable",
            "columnID",
            "dataType",
            "name",
            "description",
        }
        
        class properties:
            description = schemas.StrSchema
            columnID = schemas.StrSchema
            dataType = schemas.StrSchema
            name = schemas.StrSchema
            nullable = schemas.BoolSchema
        
            @staticmethod
            def appliedColumnTests() -> typing.Type['AppliedColumnTests']:
                return AppliedColumnTests
            
            
            class columnReferences(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['IntermediateColumnRefResult']:
                        return IntermediateColumnRefResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['IntermediateColumnRefResult'], typing.List['IntermediateColumnRefResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'columnReferences':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'IntermediateColumnRefResult':
                    return super().__getitem__(i)
        
            @staticmethod
            def config() -> typing.Type['ColumnMetadataConfig']:
                return ColumnMetadataConfig
            defaultValue = schemas.StrSchema
        
            @staticmethod
            def hashDetails() -> typing.Type['HashMetadata']:
                return HashMetadata
            
            
            class hashedColumns(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ColumnReference']:
                        return ColumnReference
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ColumnReference'], typing.List['ColumnReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hashedColumns':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ColumnReference':
                    return super().__getitem__(i)
            isBusinessKey = schemas.BoolSchema
            isChangeTracking = schemas.BoolSchema
            isSurrogateKey = schemas.BoolSchema
            
            
            class keyColumnType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("None")
                
                @schemas.classproperty
                def PRIMARY_BUSINESS_KEY(cls):
                    return cls("primaryBusinessKey")
                
                @schemas.classproperty
                def SURROGATE_KEY(cls):
                    return cls("surrogateKey")
            primaryKey = schemas.BoolSchema
            
            
            class sources(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SourceColumnReference']:
                        return SourceColumnReference
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SourceColumnReference'], typing.List['SourceColumnReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sources':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SourceColumnReference':
                    return super().__getitem__(i)
            
            
            class systemColumnType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("None")
                
                @schemas.classproperty
                def SYS_CREATE_DATE(cls):
                    return cls("sysCreateDate")
                
                @schemas.classproperty
                def SYS_CURRENT_FLAG(cls):
                    return cls("sysCurrentFlag")
                
                @schemas.classproperty
                def SYS_END_DATE(cls):
                    return cls("sysEndDate")
                
                @schemas.classproperty
                def SYS_START_DATE(cls):
                    return cls("sysStartDate")
                
                @schemas.classproperty
                def SYS_UPDATE_DATE(cls):
                    return cls("sysUpdateDate")
                
                @schemas.classproperty
                def SYS_VERSION(cls):
                    return cls("sysVersion")
            transform = schemas.StrSchema
            uniqueKey = schemas.BoolSchema
            __annotations__ = {
                "description": description,
                "columnID": columnID,
                "dataType": dataType,
                "name": name,
                "nullable": nullable,
                "appliedColumnTests": appliedColumnTests,
                "columnReferences": columnReferences,
                "config": config,
                "defaultValue": defaultValue,
                "hashDetails": hashDetails,
                "hashedColumns": hashedColumns,
                "isBusinessKey": isBusinessKey,
                "isChangeTracking": isChangeTracking,
                "isSurrogateKey": isSurrogateKey,
                "keyColumnType": keyColumnType,
                "primaryKey": primaryKey,
                "sources": sources,
                "systemColumnType": systemColumnType,
                "transform": transform,
                "uniqueKey": uniqueKey,
            }
    
    nullable: MetaOapg.properties.nullable
    columnID: MetaOapg.properties.columnID
    dataType: MetaOapg.properties.dataType
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["columnID"]) -> MetaOapg.properties.columnID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataType"]) -> MetaOapg.properties.dataType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nullable"]) -> MetaOapg.properties.nullable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appliedColumnTests"]) -> 'AppliedColumnTests': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["columnReferences"]) -> MetaOapg.properties.columnReferences: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["config"]) -> 'ColumnMetadataConfig': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultValue"]) -> MetaOapg.properties.defaultValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hashDetails"]) -> 'HashMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hashedColumns"]) -> MetaOapg.properties.hashedColumns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isBusinessKey"]) -> MetaOapg.properties.isBusinessKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isChangeTracking"]) -> MetaOapg.properties.isChangeTracking: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSurrogateKey"]) -> MetaOapg.properties.isSurrogateKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["keyColumnType"]) -> MetaOapg.properties.keyColumnType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryKey"]) -> MetaOapg.properties.primaryKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sources"]) -> MetaOapg.properties.sources: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemColumnType"]) -> MetaOapg.properties.systemColumnType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transform"]) -> MetaOapg.properties.transform: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uniqueKey"]) -> MetaOapg.properties.uniqueKey: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "columnID", "dataType", "name", "nullable", "appliedColumnTests", "columnReferences", "config", "defaultValue", "hashDetails", "hashedColumns", "isBusinessKey", "isChangeTracking", "isSurrogateKey", "keyColumnType", "primaryKey", "sources", "systemColumnType", "transform", "uniqueKey", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["columnID"]) -> MetaOapg.properties.columnID: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataType"]) -> MetaOapg.properties.dataType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nullable"]) -> MetaOapg.properties.nullable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appliedColumnTests"]) -> typing.Union['AppliedColumnTests', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["columnReferences"]) -> typing.Union[MetaOapg.properties.columnReferences, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["config"]) -> typing.Union['ColumnMetadataConfig', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultValue"]) -> typing.Union[MetaOapg.properties.defaultValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hashDetails"]) -> typing.Union['HashMetadata', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hashedColumns"]) -> typing.Union[MetaOapg.properties.hashedColumns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isBusinessKey"]) -> typing.Union[MetaOapg.properties.isBusinessKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isChangeTracking"]) -> typing.Union[MetaOapg.properties.isChangeTracking, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSurrogateKey"]) -> typing.Union[MetaOapg.properties.isSurrogateKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["keyColumnType"]) -> typing.Union[MetaOapg.properties.keyColumnType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryKey"]) -> typing.Union[MetaOapg.properties.primaryKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sources"]) -> typing.Union[MetaOapg.properties.sources, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemColumnType"]) -> typing.Union[MetaOapg.properties.systemColumnType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transform"]) -> typing.Union[MetaOapg.properties.transform, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uniqueKey"]) -> typing.Union[MetaOapg.properties.uniqueKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "columnID", "dataType", "name", "nullable", "appliedColumnTests", "columnReferences", "config", "defaultValue", "hashDetails", "hashedColumns", "isBusinessKey", "isChangeTracking", "isSurrogateKey", "keyColumnType", "primaryKey", "sources", "systemColumnType", "transform", "uniqueKey", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        nullable: typing.Union[MetaOapg.properties.nullable, bool, ],
        columnID: typing.Union[MetaOapg.properties.columnID, str, ],
        dataType: typing.Union[MetaOapg.properties.dataType, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        appliedColumnTests: typing.Union['AppliedColumnTests', schemas.Unset] = schemas.unset,
        columnReferences: typing.Union[MetaOapg.properties.columnReferences, list, tuple, schemas.Unset] = schemas.unset,
        config: typing.Union['ColumnMetadataConfig', schemas.Unset] = schemas.unset,
        defaultValue: typing.Union[MetaOapg.properties.defaultValue, str, schemas.Unset] = schemas.unset,
        hashDetails: typing.Union['HashMetadata', schemas.Unset] = schemas.unset,
        hashedColumns: typing.Union[MetaOapg.properties.hashedColumns, list, tuple, schemas.Unset] = schemas.unset,
        isBusinessKey: typing.Union[MetaOapg.properties.isBusinessKey, bool, schemas.Unset] = schemas.unset,
        isChangeTracking: typing.Union[MetaOapg.properties.isChangeTracking, bool, schemas.Unset] = schemas.unset,
        isSurrogateKey: typing.Union[MetaOapg.properties.isSurrogateKey, bool, schemas.Unset] = schemas.unset,
        keyColumnType: typing.Union[MetaOapg.properties.keyColumnType, str, schemas.Unset] = schemas.unset,
        primaryKey: typing.Union[MetaOapg.properties.primaryKey, bool, schemas.Unset] = schemas.unset,
        sources: typing.Union[MetaOapg.properties.sources, list, tuple, schemas.Unset] = schemas.unset,
        systemColumnType: typing.Union[MetaOapg.properties.systemColumnType, str, schemas.Unset] = schemas.unset,
        transform: typing.Union[MetaOapg.properties.transform, str, schemas.Unset] = schemas.unset,
        uniqueKey: typing.Union[MetaOapg.properties.uniqueKey, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ColumnMetadata':
        return super().__new__(
            cls,
            *args,
            nullable=nullable,
            columnID=columnID,
            dataType=dataType,
            name=name,
            description=description,
            appliedColumnTests=appliedColumnTests,
            columnReferences=columnReferences,
            config=config,
            defaultValue=defaultValue,
            hashDetails=hashDetails,
            hashedColumns=hashedColumns,
            isBusinessKey=isBusinessKey,
            isChangeTracking=isChangeTracking,
            isSurrogateKey=isSurrogateKey,
            keyColumnType=keyColumnType,
            primaryKey=primaryKey,
            sources=sources,
            systemColumnType=systemColumnType,
            transform=transform,
            uniqueKey=uniqueKey,
            _configuration=_configuration,
            **kwargs,
        )

from coalesce_python_sdk.model.applied_column_tests import AppliedColumnTests
from coalesce_python_sdk.model.column_metadata_config import ColumnMetadataConfig
from coalesce_python_sdk.model.column_reference import ColumnReference
from coalesce_python_sdk.model.hash_metadata import HashMetadata
from coalesce_python_sdk.model.intermediate_column_ref_result import IntermediateColumnRefResult
from coalesce_python_sdk.model.source_column_reference import SourceColumnReference
