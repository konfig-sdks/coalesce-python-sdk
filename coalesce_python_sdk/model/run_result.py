# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coalesce_python_sdk import schemas  # noqa: F401


class RunResult(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The result output describing each query processed during a run.
    """


    class MetaOapg:
        required = {
            "isRunning",
            "name",
            "queryResults",
            "nodeID",
        }
        
        class properties:
            isRunning = schemas.BoolSchema
            name = schemas.StrSchema
            nodeID = schemas.StrSchema
            
            
            class queryResults(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['QueryResult']:
                        return QueryResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['QueryResult'], typing.List['QueryResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'queryResults':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'QueryResult':
                    return super().__getitem__(i)
        
            @staticmethod
            def renderQueryResult() -> typing.Type['QueryResult']:
                return QueryResult
            __annotations__ = {
                "isRunning": isRunning,
                "name": name,
                "nodeID": nodeID,
                "queryResults": queryResults,
                "renderQueryResult": renderQueryResult,
            }
    
    isRunning: MetaOapg.properties.isRunning
    name: MetaOapg.properties.name
    queryResults: MetaOapg.properties.queryResults
    nodeID: MetaOapg.properties.nodeID
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isRunning"]) -> MetaOapg.properties.isRunning: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodeID"]) -> MetaOapg.properties.nodeID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["queryResults"]) -> MetaOapg.properties.queryResults: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["renderQueryResult"]) -> 'QueryResult': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["isRunning", "name", "nodeID", "queryResults", "renderQueryResult", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isRunning"]) -> MetaOapg.properties.isRunning: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodeID"]) -> MetaOapg.properties.nodeID: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["queryResults"]) -> MetaOapg.properties.queryResults: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["renderQueryResult"]) -> typing.Union['QueryResult', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["isRunning", "name", "nodeID", "queryResults", "renderQueryResult", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        isRunning: typing.Union[MetaOapg.properties.isRunning, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        queryResults: typing.Union[MetaOapg.properties.queryResults, list, tuple, ],
        nodeID: typing.Union[MetaOapg.properties.nodeID, str, ],
        renderQueryResult: typing.Union['QueryResult', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RunResult':
        return super().__new__(
            cls,
            *args,
            isRunning=isRunning,
            name=name,
            queryResults=queryResults,
            nodeID=nodeID,
            renderQueryResult=renderQueryResult,
            _configuration=_configuration,
            **kwargs,
        )

from coalesce_python_sdk.model.query_result import QueryResult
