# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coalesce_python_sdk import schemas  # noqa: F401


class JobsCancelJobRunRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "runID",
        }
        
        class properties:
            runID = schemas.Int32Schema
            orgID = schemas.StrSchema
            environmentID = schemas.StrSchema
            __annotations__ = {
                "runID": runID,
                "orgID": orgID,
                "environmentID": environmentID,
            }
    
    runID: MetaOapg.properties.runID
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runID"]) -> MetaOapg.properties.runID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgID"]) -> MetaOapg.properties.orgID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environmentID"]) -> MetaOapg.properties.environmentID: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["runID", "orgID", "environmentID", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runID"]) -> MetaOapg.properties.runID: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgID"]) -> typing.Union[MetaOapg.properties.orgID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environmentID"]) -> typing.Union[MetaOapg.properties.environmentID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["runID", "orgID", "environmentID", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        runID: typing.Union[MetaOapg.properties.runID, decimal.Decimal, int, ],
        orgID: typing.Union[MetaOapg.properties.orgID, str, schemas.Unset] = schemas.unset,
        environmentID: typing.Union[MetaOapg.properties.environmentID, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JobsCancelJobRunRequest':
        return super().__new__(
            cls,
            *args,
            runID=runID,
            orgID=orgID,
            environmentID=environmentID,
            _configuration=_configuration,
            **kwargs,
        )
