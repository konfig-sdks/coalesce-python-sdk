# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from coalesce_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from coalesce_python_sdk.api_response import AsyncGeneratorResponse
from coalesce_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coalesce_python_sdk import schemas  # noqa: F401

from coalesce_python_sdk.model.run_type import RunType as RunTypeSchema
from coalesce_python_sdk.model.error_response import ErrorResponse as ErrorResponseSchema
from coalesce_python_sdk.model.run_status import RunStatus as RunStatusSchema
from coalesce_python_sdk.model.runs_order_by import RunsOrderBy as RunsOrderBySchema
from coalesce_python_sdk.model.runs_response import RunsResponse as RunsResponseSchema

from coalesce_python_sdk.type.runs_order_by import RunsOrderBy
from coalesce_python_sdk.type.run_type import RunType
from coalesce_python_sdk.type.run_status import RunStatus
from coalesce_python_sdk.type.runs_response import RunsResponse
from coalesce_python_sdk.type.error_response import ErrorResponse

from ...api_client import Dictionary
from coalesce_python_sdk.pydantic.runs_order_by import RunsOrderBy as RunsOrderByPydantic
from coalesce_python_sdk.pydantic.error_response import ErrorResponse as ErrorResponsePydantic
from coalesce_python_sdk.pydantic.run_type import RunType as RunTypePydantic
from coalesce_python_sdk.pydantic.runs_response import RunsResponse as RunsResponsePydantic
from coalesce_python_sdk.pydantic.run_status import RunStatus as RunStatusPydantic

from . import path

# Query params


class LimitSchema(
    schemas.IntSchema
):


    class MetaOapg:
        inclusive_maximum = 1000
        inclusive_minimum = 0


class StartingFromSchema(
    schemas.ComposedSchema,
):


    class MetaOapg:
        
        
        class one_of_0(
            schemas.IntSchema
        ):
        
        
            class MetaOapg:
                inclusive_minimum = 0
        one_of_1 = schemas.DateTimeSchema
        
        @classmethod
        @functools.lru_cache()
        def one_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.one_of_0,
                cls.one_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StartingFromSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
OrderBySchema = RunsOrderBySchema


class OrderByDirectionSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "asc": "ASC",
            "desc": "DESC",
        }
    
    @schemas.classproperty
    def ASC(cls):
        return cls("asc")
    
    @schemas.classproperty
    def DESC(cls):
        return cls("desc")
RunTypeSchema = RunTypeSchema
RunStatusSchema = RunStatusSchema
EnvironmentIDSchema = schemas.StrSchema
DetailSchema = schemas.BoolSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'limit': typing.Union[LimitSchema, decimal.Decimal, int, ],
        'startingFrom': typing.Union[StartingFromSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        'orderBy': typing.Union[OrderBySchema, ],
        'orderByDirection': typing.Union[OrderByDirectionSchema, str, ],
        'runType': typing.Union[RunTypeSchema, ],
        'runStatus': typing.Union[RunStatusSchema, ],
        'environmentID': typing.Union[EnvironmentIDSchema, str, ],
        'detail': typing.Union[DetailSchema, bool, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_limit = api_client.QueryParameter(
    name="limit",
    style=api_client.ParameterStyle.FORM,
    schema=LimitSchema,
    explode=True,
)
request_query_starting_from = api_client.QueryParameter(
    name="startingFrom",
    style=api_client.ParameterStyle.FORM,
    schema=StartingFromSchema,
    explode=True,
)
request_query_order_by = api_client.QueryParameter(
    name="orderBy",
    style=api_client.ParameterStyle.FORM,
    schema=RunsOrderBySchema,
    explode=True,
)
request_query_order_by_direction = api_client.QueryParameter(
    name="orderByDirection",
    style=api_client.ParameterStyle.FORM,
    schema=OrderByDirectionSchema,
    explode=True,
)
request_query_run_type = api_client.QueryParameter(
    name="runType",
    style=api_client.ParameterStyle.FORM,
    schema=RunTypeSchema,
    explode=True,
)
request_query_run_status = api_client.QueryParameter(
    name="runStatus",
    style=api_client.ParameterStyle.FORM,
    schema=RunStatusSchema,
    explode=True,
)
request_query_environment_id = api_client.QueryParameter(
    name="environmentID",
    style=api_client.ParameterStyle.FORM,
    schema=EnvironmentIDSchema,
    explode=True,
)
request_query_detail = api_client.QueryParameter(
    name="detail",
    style=api_client.ParameterStyle.FORM,
    schema=DetailSchema,
    explode=True,
)
_auth = [
    'BearerAuth',
]
SchemaFor200ResponseBodyApplicationJson = RunsResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: RunsResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: RunsResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = ErrorResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: ErrorResponse


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: ErrorResponse


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
)
SchemaFor403ResponseBodyApplicationJson = ErrorResponseSchema


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: ErrorResponse


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: ErrorResponse


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationJson),
    },
)
SchemaFor500ResponseBodyApplicationJson = ErrorResponseSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: ErrorResponse


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: ErrorResponse


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
SchemaFor502ResponseBodyApplicationJson = ErrorResponseSchema


@dataclass
class ApiResponseFor502(api_client.ApiResponse):
    body: ErrorResponse


@dataclass
class ApiResponseFor502Async(api_client.AsyncApiResponse):
    body: ErrorResponse


_response_for_502 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor502,
    response_cls_async=ApiResponseFor502Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor502ResponseBodyApplicationJson),
    },
)
SchemaFor503ResponseBodyApplicationJson = ErrorResponseSchema


@dataclass
class ApiResponseFor503(api_client.ApiResponse):
    body: ErrorResponse


@dataclass
class ApiResponseFor503Async(api_client.AsyncApiResponse):
    body: ErrorResponse


_response_for_503 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor503,
    response_cls_async=ApiResponseFor503Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor503ResponseBodyApplicationJson),
    },
)
SchemaFor504ResponseBodyApplicationJson = ErrorResponseSchema


@dataclass
class ApiResponseFor504(api_client.ApiResponse):
    body: ErrorResponse


@dataclass
class ApiResponseFor504Async(api_client.AsyncApiResponse):
    body: ErrorResponse


_response_for_504 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor504,
    response_cls_async=ApiResponseFor504Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor504ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '401': _response_for_401,
    '403': _response_for_403,
    '500': _response_for_500,
    '502': _response_for_502,
    '503': _response_for_503,
    '504': _response_for_504,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _list_information_mapped_args(
        self,
        limit: typing.Optional[int] = None,
        starting_from: typing.Optional[typing.Union[int, datetime]] = None,
        order_by: typing.Optional[RunsOrderBy] = None,
        order_by_direction: typing.Optional[str] = None,
        run_type: typing.Optional[RunType] = None,
        run_status: typing.Optional[RunStatus] = None,
        environment_id: typing.Optional[str] = None,
        detail: typing.Optional[bool] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        if limit is not None:
            _query_params["limit"] = limit
        if starting_from is not None:
            _query_params["startingFrom"] = starting_from
        if order_by is not None:
            _query_params["orderBy"] = order_by
        if order_by_direction is not None:
            _query_params["orderByDirection"] = order_by_direction
        if run_type is not None:
            _query_params["runType"] = run_type
        if run_status is not None:
            _query_params["runStatus"] = run_status
        if environment_id is not None:
            _query_params["environmentID"] = environment_id
        if detail is not None:
            _query_params["detail"] = detail
        args.query = _query_params
        return args

    async def _alist_information_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        List Runs
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_limit,
            request_query_starting_from,
            request_query_order_by,
            request_query_order_by_direction,
            request_query_run_type,
            request_query_run_status,
            request_query_environment_id,
            request_query_detail,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v1/runs',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _list_information_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        List Runs
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_limit,
            request_query_starting_from,
            request_query_order_by,
            request_query_order_by_direction,
            request_query_run_type,
            request_query_run_status,
            request_query_environment_id,
            request_query_detail,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v1/runs',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class ListInformationRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def alist_information(
        self,
        limit: typing.Optional[int] = None,
        starting_from: typing.Optional[typing.Union[int, datetime]] = None,
        order_by: typing.Optional[RunsOrderBy] = None,
        order_by_direction: typing.Optional[str] = None,
        run_type: typing.Optional[RunType] = None,
        run_status: typing.Optional[RunStatus] = None,
        environment_id: typing.Optional[str] = None,
        detail: typing.Optional[bool] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_information_mapped_args(
            limit=limit,
            starting_from=starting_from,
            order_by=order_by,
            order_by_direction=order_by_direction,
            run_type=run_type,
            run_status=run_status,
            environment_id=environment_id,
            detail=detail,
        )
        return await self._alist_information_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def list_information(
        self,
        limit: typing.Optional[int] = None,
        starting_from: typing.Optional[typing.Union[int, datetime]] = None,
        order_by: typing.Optional[RunsOrderBy] = None,
        order_by_direction: typing.Optional[str] = None,
        run_type: typing.Optional[RunType] = None,
        run_status: typing.Optional[RunStatus] = None,
        environment_id: typing.Optional[str] = None,
        detail: typing.Optional[bool] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_information_mapped_args(
            limit=limit,
            starting_from=starting_from,
            order_by=order_by,
            order_by_direction=order_by_direction,
            run_type=run_type,
            run_status=run_status,
            environment_id=environment_id,
            detail=detail,
        )
        return self._list_information_oapg(
            query_params=args.query,
        )

class ListInformation(BaseApi):

    async def alist_information(
        self,
        limit: typing.Optional[int] = None,
        starting_from: typing.Optional[typing.Union[int, datetime]] = None,
        order_by: typing.Optional[RunsOrderBy] = None,
        order_by_direction: typing.Optional[str] = None,
        run_type: typing.Optional[RunType] = None,
        run_status: typing.Optional[RunStatus] = None,
        environment_id: typing.Optional[str] = None,
        detail: typing.Optional[bool] = None,
        validate: bool = False,
        **kwargs,
    ) -> RunsResponsePydantic:
        raw_response = await self.raw.alist_information(
            limit=limit,
            starting_from=starting_from,
            order_by=order_by,
            order_by_direction=order_by_direction,
            run_type=run_type,
            run_status=run_status,
            environment_id=environment_id,
            detail=detail,
            **kwargs,
        )
        if validate:
            return RunsResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(RunsResponsePydantic, raw_response.body)
    
    
    def list_information(
        self,
        limit: typing.Optional[int] = None,
        starting_from: typing.Optional[typing.Union[int, datetime]] = None,
        order_by: typing.Optional[RunsOrderBy] = None,
        order_by_direction: typing.Optional[str] = None,
        run_type: typing.Optional[RunType] = None,
        run_status: typing.Optional[RunStatus] = None,
        environment_id: typing.Optional[str] = None,
        detail: typing.Optional[bool] = None,
        validate: bool = False,
    ) -> RunsResponsePydantic:
        raw_response = self.raw.list_information(
            limit=limit,
            starting_from=starting_from,
            order_by=order_by,
            order_by_direction=order_by_direction,
            run_type=run_type,
            run_status=run_status,
            environment_id=environment_id,
            detail=detail,
        )
        if validate:
            return RunsResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(RunsResponsePydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        limit: typing.Optional[int] = None,
        starting_from: typing.Optional[typing.Union[int, datetime]] = None,
        order_by: typing.Optional[RunsOrderBy] = None,
        order_by_direction: typing.Optional[str] = None,
        run_type: typing.Optional[RunType] = None,
        run_status: typing.Optional[RunStatus] = None,
        environment_id: typing.Optional[str] = None,
        detail: typing.Optional[bool] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_information_mapped_args(
            limit=limit,
            starting_from=starting_from,
            order_by=order_by,
            order_by_direction=order_by_direction,
            run_type=run_type,
            run_status=run_status,
            environment_id=environment_id,
            detail=detail,
        )
        return await self._alist_information_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def get(
        self,
        limit: typing.Optional[int] = None,
        starting_from: typing.Optional[typing.Union[int, datetime]] = None,
        order_by: typing.Optional[RunsOrderBy] = None,
        order_by_direction: typing.Optional[str] = None,
        run_type: typing.Optional[RunType] = None,
        run_status: typing.Optional[RunStatus] = None,
        environment_id: typing.Optional[str] = None,
        detail: typing.Optional[bool] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_information_mapped_args(
            limit=limit,
            starting_from=starting_from,
            order_by=order_by,
            order_by_direction=order_by_direction,
            run_type=run_type,
            run_status=run_status,
            environment_id=environment_id,
            detail=detail,
        )
        return self._list_information_oapg(
            query_params=args.query,
        )

