# coding: utf-8

"""
    Coalesce API

    REST API for performing operations with the Coalesce backend.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from coalesce_python_sdk.pydantic.applied_column_tests import AppliedColumnTests
from coalesce_python_sdk.pydantic.column_metadata_config import ColumnMetadataConfig
from coalesce_python_sdk.pydantic.column_reference import ColumnReference
from coalesce_python_sdk.pydantic.hash_metadata import HashMetadata
from coalesce_python_sdk.pydantic.intermediate_column_ref_result import IntermediateColumnRefResult
from coalesce_python_sdk.pydantic.source_column_reference import SourceColumnReference

class ColumnMetadata(BaseModel):
    description: str = Field(alias='description')

    column_i_d: str = Field(alias='columnID')

    data_type: str = Field(alias='dataType')

    name: str = Field(alias='name')

    nullable: bool = Field(alias='nullable')

    applied_column_tests: typing.Optional[AppliedColumnTests] = Field(None, alias='appliedColumnTests')

    column_references: typing.Optional[typing.List[IntermediateColumnRefResult]] = Field(None, alias='columnReferences')

    config: typing.Optional[ColumnMetadataConfig] = Field(None, alias='config')

    default_value: typing.Optional[str] = Field(None, alias='defaultValue')

    hash_details: typing.Optional[HashMetadata] = Field(None, alias='hashDetails')

    hashed_columns: typing.Optional[typing.List[ColumnReference]] = Field(None, alias='hashedColumns')

    # Tags the column as a business key.
    is_business_key: typing.Optional[bool] = Field(None, alias='isBusinessKey')

    # Tags the column as a change tracking column in type 2 dimensions.
    is_change_tracking: typing.Optional[bool] = Field(None, alias='isChangeTracking')

    # Tags the column as a surrogate key, e.g. DIM_CUSTOMER_KEY.
    is_surrogate_key: typing.Optional[bool] = Field(None, alias='isSurrogateKey')

    key_column_type: typing.Optional[Literal["None", "primaryBusinessKey", "surrogateKey"]] = Field(None, alias='keyColumnType')

    # Tags the column as a primary key.
    primary_key: typing.Optional[bool] = Field(None, alias='primaryKey')

    sources: typing.Optional[typing.List[SourceColumnReference]] = Field(None, alias='sources')

    system_column_type: typing.Optional[Literal["None", "sysCreateDate", "sysCurrentFlag", "sysEndDate", "sysStartDate", "sysUpdateDate", "sysVersion"]] = Field(None, alias='systemColumnType')

    transform: typing.Optional[str] = Field(None, alias='transform')

    unique_key: typing.Optional[bool] = Field(None, alias='uniqueKey')
    class Config:
        arbitrary_types_allowed = True
